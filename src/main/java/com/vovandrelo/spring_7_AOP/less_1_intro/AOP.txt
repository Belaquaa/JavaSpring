AOP (Aspect-Oriented Programming) - это парадигма программирования, которая основа на идее разделения основного и
служебного функционала ПО. Т.е она подразумевает извлечение из бизнес-логики служебного функционала (такого как
логирование, проверка прав доступа, обработка транзакций, кеширование и т.п.) и размещение его в отдельных модулях
(аспектах). Затем эти аспекты применяются ко всем функциям, где они нужны, автоматически, без явного вызова.

Основные реализации AOP:
 - Spring AOP — часть фреймворка Spring, предоставляющая интеграцию AOP с контейнером Spring. Использует прокси-подход
   для реализации AOP, это означает, что он проксирует целевые объекты, то есть, вызов метода целевого объекта
   перенаправляется через прокси, который может выполнять дополнительные действия до или после вызова метода.
   В Spring используется 2 типа проксирования объектов: JDK Dynamic Proxy и CGLIB Proxy:
    - Если все проксируемые методы объекта объявлены в реализуемом интерфейсе(или реализуемых интерфейсах), то
      используется подход на основании механизма JDK Dynamic Proxy, основная идея которого заключается в том,
      прокси-объект будет реализовывать те же интерфейсы, что и оригинальный класс, и перенаправлять вызовы методов
      оригинальному классу. Оригинальный класс будет содержаться как значение поля proxy-объекта.
    - Если все проксируемые методы объекта не относятся к какому-либо интерфейсу, а являются уникальными для данного
      класса, то используется подход на основании механизма CGLIB Proxy, основная идея которого заключается в том,
      прокси-объект будет создавать подкласса целевого класса и переопределять все не-final методы целевого класса.
   Соответственно, чтобы класс мог быть проксируемым, необходимо соблюсти по крайней мере одно условие:
    - Все проксируемые методы должны быть определены в реализуемых интерфейсах (для реализации по JDK Dynamic Proxy)
    - Класс и его проксируемые методы не должны быть final (для реализации по CGLIB Proxy)
 - AspectJ — это более мощный и полнофункциональный фреймворк для AOP, который предоставляет полную поддержку
   аспектно-ориентированного программирования. Он позволяет вмешиваться в более низкоуровневые операции, такие как
   создание объектов, обращение к полям и обработка исключений. Аспекты AspectJ встраиваются непосредственно в байт-код
   целевых классов, что позволяет AspectJ работать на более низком уровне, чем прокси-подход Spring AOP.

Основные понятия:
 - Aspect: модуль, инкапсулирующий поведение, относящееся к перекрестным интересам (служебному функционалу). Аспект
   может включать в себя советы (advices) и точки соединения (pointcuts).
 - Advice: действие, которое аспект должен выполнить в определенной точке выполнения программы (pointcuts). Существуют
   различные типы советов:
    - Before: выполняется до метода с основной логикой.
    - After returning: выполняется после того, как основной метод завершился успешно.
    - After throwing: выполняется, если основной метод завершается исключением.
    - After: выполняется после основного метода, независимо от того, завершился он успешно или с исключением.
    - Around: оборачивает метод, позволяя выполнить дополнительные действия до и после вызова метода.
 - Pointcut: выражение, оно определяет место, в котором должен быть применён Advice.
 - JoinPoint: точка/момент в выполняемой программе, когда необходимо применить тот или иной Advice. Т.е это точка
   переплетения метода с бизнес-логикой и метода со служебным функционалом;

В какой момент создаётся proxy-объект Spring?
В момент запуска приложения, Spring анализирует все созданные Aspect, Advice и Pointcut и производит поиск объектов,
к которым могут применены те или иные Advice. Если внутри объекта, существует хотя бы 1н метод, к которому может быть
применён Advice, то данный объект будет создан внутри Spring-Container-а как proxy. Т.е. извлекаться из Spring
Container-a будет уже proxy, а не обычный объект. Эти proxy перехватывают вызовы к целевым методам и решают, нужно ли
применять Advice-ы, основываясь на Pointcut-ах;

Подключение AOP к Spring:
 - Для включения поддержки Spring-AOP используется аннотация @EnableAspectJAutoProxy, она включает поддержку обработки
   компонентов, аннотированных с @Aspect, что позволяет использовать стиль AspectJ для объявления аспектов. Хотя
   аннотация @Aspect происходит из библиотеки AspectJ, Spring AOP поддерживает её использование для определения
   аспектов в своем контейнере. Это означает, что вы можете использовать стиль объявления аспектов AspectJ, но
   обработка аспектов будет выполнена с помощью прокси-механизма Spring AOP.
 - Для создания Aspect-ов используется аннотация @Aspect.
 - Для создания Advice-ов используются аннотации: @Before, @After, @AfterReturning, @AfterThrowing и @Around.
 - Для создания Pointcut-ов необходимо определить выражение внутри Advice-аннотации или использовать @Pointcut.
