<====================================================== URL-АДРЕС =====================================================>

URL - это адрес какого-либо веб-ресурса в интернете(страницы, файла и т.п.).

Структура URL-адреса:
http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument, где:
- http:// - протокол, используемый для доступа к ресурсу
- www.example.com - доменное имя
- :80 - Порт, используемый для доступа к ресурсу на сервере. Необязательный компонент, если не указан, используется
        порт по умолчанию для выбранного протокола (например, 80 для HTTP и 443 для HTTPS).
- /path/to/myFile.html - путь к конкретному ресурсу на сервере
- ?key1=value1&key2=value2 - параметры
- #SomewhereInTheDocument - метка на конкретную часть страницы

<================================================ HTTP И HTTPS ПРОТОКОЛЫ ==============================================>

HTTP - это протокол передачи гипертекста (HTML), он работает в формате "Клиент-Сервер", то есть: браузер отправляет
единичный запрос на сервер, который в свою очередь обрабатывает его, формирует ответ и делится с браузером этим
ответом.

Особенности:
 - Клиент сам инициирует запрос;
 - Обмен происходит одиночными сообщениями (а не потоком данных);

Изначально создавался для передачи гипертекста, но в настоящее время используется для передачи произвольных данных.

Фортам HTTP-запроса:
- Стартовая строка - содержит параметры запроса или ответа.
  - Метод
    - GET    - получение данных с сервера.
    - POST   - отправка данных на сервер с целью создания какой-либо сущности.
    - DELETE - отправка данных на сервер с целью удаления какой-либо сущности.
    - PATH   - отправка данных на сервер с целью частичной замены какой-либо сущности.
    - PUT    - отправка данных на сервер с целью создания или полной замены какой-либо сущности.
  - URL
  - HTTP/Версия
- Заголовок - содержит сведения о передаче.
- Тело запроса - содержит передаваемые данные.

Формат HTTP-ответа:
- Стартовая строка - содержит параметры ответа.
  - HTTP/Версия
  - Код состояния
    - 1ХХ - информационные сообщения
    - 2ХХ - успешное выполнение
    - 3XX - сообщение о перенаправлении
    - 4ХХ - ошибка на стороне клиента
    - 5ХХ - ошибка на стороне сервера
- Заголовок - содержит сведения о передаче.
- Тело ответа - содержит получаемые данные.

HTTPS - защищённый HTTP

<========================================================= MVC ========================================================>

MVC (Model-View-Controller) — это паттерн проектирования, который разделяет приложение на три основные компонента:
модель (Model), представление (View) и контроллер (Controller). Цель такого разделения — обеспечить разделение
ответственности, что упрощает управление сложностью в больших приложениях и облегчает тестирование, поддержку и
развитие:
 - Model (Модель): Этот компонент отвечает за данные и бизнес-логику приложения. Он напрямую управляет данными, логикой
   и правилами приложения.
 - View (Представление): Представление отвечает за отображение данных, которые получает от модели, пользователю. Оно
   реализует визуализацию данных и может быть реализовано в виде HTML страницы, JSON, XML и т.д.
 - Controller (Контроллер): Контроллер обрабатывает входящие запросы от пользователя, манипулирует моделью и возвращает
   подходящее представление в ответ. Контроллер действует как посредник между моделью и представлением.

<======================================================= REST API =====================================================>

REST API - это архитектурный стиль построения web-приложений, который описывает правила создания серверного ПО.

Основные правила:
 - Взаимодействие клиента с сервером должно происходить с помощью протокола HTTP(s), причём, допускается использовать
   только методы: POST, GET, PUT и DELETE.
 - Обмен сообщениями без сохранения состояния. Каждое сообщение самодостаточное и содержит всю информацию, необходимую
   для его обработки, т.е. сервер не хранит результаты предыдущих сессий с клиентскими приложениями. Так же такой
   формат взаимодействия является универсальным — он не зависит от технологий, используемых на клиенте и на сервере,
   и не привязывает разработчиков к определенному провайдеру.
 - Из-за того, что приходится каждый раз заново передавать все данные для обработки запроса, объем сообщений
   увеличивается. Чтобы сохранить при этом высокую скорость обмена, данные передаются в максимально сжатом формате.
   Чаще всего REST API использует формат JSON, более лаконичный чем XML.


<========================================================= SOAP =======================================================>

SOAP — это протокол, который определяет, как две сущности в сети могут общаться, используя XML для обмена сообщениями.
SOAP может работать поверх любого транспортного протокола, такого как HTTP, SMTP и др., но чаще всего используется HTTP.
SOAP строго определяет структуру сообщения и способ обработки ошибок, что делает его более формализованным по сравнению
с REST.

<====================================================== SPRING MVC ====================================================>

Spring Web MVC — это модуль в рамках Spring Framework, который предоставляет компоненты для разработки веб-приложений
на основе паттерна MVC (и REST-API).

<================================================= Servlet Container ==================================================>

Servlet Container — это часть веб-сервера, которая обеспечивает среду для запуска servlet-ов.

Servlet-ы — это Java-программы, которые обрабатывают запросы клиентов и генерируют динамический контент.

Основные обязанности:
 - Принимает запросы и маршрутизирует их к соответствующим servlet-ам;
 - Управляет жизненным циклом servlet-ов;
 - Управляет жизненным циклом ServletContext;
 - Управляет жизненным циклом фильтров;
 - Управляет жизненным циклом слушателей;

<============================================== ServletContextListener ================================================>

ServletContextListener — это интерфейс, который используется для прослушивания событий жизненного цикла ServletContext.

Разработчики могут реализовать этот интерфейс, чтобы создать слушателя (listener), который может выполнять определенные
действия при инициализации или уничтожении ServletContext. Интерфейс ServletContextListener содержит два метода:
 - contextInitialized(ServletContextEvent sce): этот метод вызывается один раз, когда ServletContext инициализируется,
   то есть когда веб-приложение запускается или когда оно становится доступным после его установки или перезапуска.
 - contextDestroyed(ServletContextEvent sce): этот метод вызывается один раз, когда ServletContext уничтожается, то
   есть когда веб-приложение останавливается или перезагружается.

Особенности:
 - Все ServletContextListeners уведомляются об инициализации ServletContext до инициализации любых фильтров или
   сервлетов в веб-приложении.
 - Все ServletContextListeners уведомляются об уничтожении ServletContext после того, как все сервлеты и фильтры
   уничтожены.

Основные применения ServletContextListener:
 - Инициализация ресурсов: При старте веб-приложения можно инициализировать ресурсы, такие как соединения с
   базой данных, пулы потоков, системы кэширования и другие ресурсы, которые должны быть доступны для всех
   компонентов приложения.
 - Освобождение ресурсов: Перед остановкой веб-приложения можно корректно закрыть и освободить ресурсы, чтобы
   избежать утечек памяти и других потенциальных проблем.

<================================================ ContextLoaderListener ===============================================>

ContextLoaderListener - это механизм, который используется для загрузки корневого Spring-ApplicationContext. Там обычно
содержатся bean-ы, общие для всего приложения, такие как сервисы, репозитории, источники данных и другие компоненты
инфраструктуры.

<=================================================== ServletContext ===================================================>

ServletContext - это объект, который всегда существует в единственном экземпляре и содержит общую информацию о
веб-приложении и сервере. Он является общим ресурсом для всех servlet-ов и фильтров в этом приложении, позволяя
им обмениваться информацией (путём установки различных атрибутов, доступным всем servlet-ам).

Основные предназначения ServletContext
 - Получать параметры инициализации приложения;
 - Получать информацию о сервере и Servlet-Container-е, например, версию и имя сервера.
 - Получать доступ к ресурсам приложения, таким как файлы и другие данные, расположенные в каталоге веб-приложения;

<======================================================== Filter ======================================================>

Filter - это интерфейс, который предоставляет функциональность для предварительной обработки запросов и постобработки
ответов в веб-приложениях, работающих на Java.

Как они работают:
Когда HTTP запрос достигает Servlet-Container-а, Servlet-Container определяет, какие фильтры должны быть применены к
этому запросу, и вызывает их в порядке определения. После выполнения всех фильтров, запрос передаётся целевому
Servlet-у. Т.е. Filter - это прослойка между Servlet-Container-ом и конкретным Servlet-ом.

В веб-приложении можно сконфигурировать несколько filter-ов, через которые будет последовательно проходить запрос.
Такой набор фильтров называется цепочкой фильтров и представляются объектом FilterChain.

Основные методы интерфейса Filter:
 - void init(FilterConfig filterConfig): вызывается Servlet-Container-ом для инициализации фильтра при запуске
   приложения. Аргумент FilterConfig предоставляет конфигурацию фильтра из дескриптора развертывания (который
   представляется Java-конфигурацией или аннотациями).
 - void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) - основной метод, который
   вызывается каждый раз, когда фильтр применяется к запросу. ServletRequest и ServletResponse представляют собой
   запрос и ответ соответственно. FilterChain представляет собой цепочку фильтров, и вызов chain.doFilter(request,
   response) передает управление следующему фильтру в цепочке. Если текущий фильтр последний, то управление передается
   целевому сервлету или статическому ресурсу.
 - void destroy() - вызывается Servlet-Container-ом для уничтожения фильтра при остановке приложения. Этот метод можно
   использовать для освобождения ресурсов, занятых фильтром.

<==================================== Паттерн Front Controller и DispatcherServlet ====================================>

Шаблон проектирования Front Controller представляет собой централизованный точку входа для обработки всех запросов.
В контексте веб-приложений, Front Controller обычно представлен в виде одного Servlet-а, который принимает все запросы
к приложению и затем делегирует выполнение конкретных действий другим компонентам.

В Spring Framework шаблон Front Controller реализован через компонент под названием DispatcherServlet. Он является
наследником класса HttpServlet и служит в качестве основного Servlet-а, который управляет потоком HTTP-запросов в
Spring-приложении. Когда HTTP-запрос поступает в DispatcherServlet, он определяет, какой контроллер должен обработать
запрос. Это делается с помощью mapping-а URL-адресов на конкретные методы контроллеров

В одном приложении Spring можно создать несколько DispatcherServlet-ов, каждый из них будет инициализировать свой
собственный WebApplicationContext, который является дочерним контекстом для главного ApplicationContext приложения.
Важно понимать, что дочерний контекст имеет доступ к bean-ам, определенным в родительском контексте, но не наоборот.
Это означает, что bean-ы, определенные в WebApplicationContext одного DispatcherServlet, не будут доступны другому
DispatcherServlet.

Создание нескольких DispatcherServlet-ов может быть полезно, например, когда вы хотите разделить части вашего
приложения на разные модули с разными конфигурациями. Например, один DispatcherServlet может обрабатывать API-запросы,
а другой - запросы, связанные с веб-интерфейсом пользователя. Шаблон Front Controller по-прежнему реализуется каждым
DispatcherServlet индивидуально, но теперь у вас есть несколько точек входа в приложение, каждая из которых
обрабатывает свою часть запросов.

<=================================================== HandlerMapping ===================================================>

HandlerMapping - это механизм, который отвечает за определение, какой контроллер должен обработать входящий запрос.
Он сопоставляет URL с соответствующим методом контроллера.

<==================================================== Interceptors ====================================================>

Interceptor — это концепция, используемая для перехвата входящих HTTP-запросов (от DispatcherServlet) и исходящих
HTTP-ответов перед тем, как они достигнут контроллеров (для запросов) или после того, как они были обработаны
контроллерами, но перед тем, как они будут отправлены обратно DispatcherServlet.

Несколько Interceptor-ов могут быть объединены, такая концепция называется цепочкой Interceptor-ов, используемые в ней
Interceptor-ы обрабатывается в порядке определения. Каждый интерцептор может решить, следует ли продолжать дальнейшую
обработку цепочки, возвращая true или false из метода preHandle.

В Spring, интерсепторы определяются путем реализации интерфейса HandlerInterceptor, который содержит три основных
метода:
 - preHandle(HttpServletRequest request, HttpServletResponse response, Object handler): вызывается перед выполнением
   метода контроллера. Этот метод может использоваться для предварительной обработки запроса, например, для
   аутентификации пользователя, логирования или проверки прав доступа. Если этот метод возвращает true, обработка
   продолжается, если false — дальнейшая обработка прерывается, и ответ отправляется назад клиенту.
 - postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView):
   вызывается после выполнения метода контроллера, но перед тем, как представление (view) будет отрендерено. Этот
   метод можно использовать для добавления дополнительных атрибутов в модель или для выполнения дополнительной
   обработки перед отображением представления.
 - afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex): вызывается
   после того, как представление было отрендерено и ответ отправлен клиенту. Этот метод можно использовать для
   выполнения каких-либо задач по очистке, например, для освобождения ресурсов.

Отличия Filters и Interceptors:
 - Interceptors могут работать только с запросами к контроллерам, в то время как Filters могут работать почти со всеми
   запросами (например, js, .css и т.д.).

<==================================================== Controllers =====================================================>

Аннотация @ResponseBody используется на уровне метода в контроллере для указания того, что возвращаемое значение метода
должно быть связано с телом HTTP-ответа. Это означает, что возвращаемое значение будет автоматически сериализовано в
JSON или XML и помещено в тело ответа.

Аннотация @RequestBody используется на уровне параметра метода для указания того, что параметр должен быть связан с
телом HTTP-запроса. Это означает, что входящее тело запроса будет автоматически десериализовано из JSON, XML или
другого формата в объект Java.

Аннотации @RequestBody и @ResponseBody преобразуют объекты автоматически, но для их корректной работы необходима
библиотека Jackson (зависимость jackson-databind), она занимается конвертацией JavaObj в JSON. В Spring-Boot
устанавливается автоматически. Обязательным условием возможности преобразования является наличие у java-объекта
set-теров и get-теров.

Аннотация @Controller указывает, что класс является веб-контроллером. Это означает, что класс может обрабатывать
веб-запросы. @Controller является специализацией аннотации @Component, что позволяет автоматически обнаруживать
Spring-контейнером классы-контроллеры во время сканирования путей. Контроллеры, помеченные аннотацией @Controller,
обычно возвращают имя представления (view name), и Spring использует ViewResolver для определения, какое представление
должно быть отрендерено. Ответ может быть HTML-страницей, JSP или другим типом веб-страницы.

Аннотация @RestController является более специализированной версией аннотации @Controller. Она объединяет в себе
@Controller и @ResponseBody, что означает, что каждый метод в классе с этой аннотацией будет обрабатывать ответ как
тело ответа (response body), а не имя представления. Это идеально подходит для создания RESTful веб-сервисов, где вы
хотите возвращать данные (например, JSON или XML) напрямую в теле ответа.

ResponseEntity является классом в Spring Framework, который представляет целый HTTP-ответ, включая статус код,
заголовки и тело. Этот класс часто используется в веб-приложениях Spring MVC или Spring WebFlux для возвращения данных
в контроллерах.

<======================================================= Models =======================================================>

При использовании стандартных @Controller-ов, их методы могут принимать объект Model, в который заносятся полученные от
сервисного слоя данные. Данные из этого объекта будут автоматически встроены в возвращаемое из метода представление.
Конкретные реализации Model:
 - Model: это интерфейс, который представляет собой контейнер для хранения данных модели. Эти данные должны быть
   переданы представлению. Контроллеры используют Model для добавления атрибутов, которые необходимо отобразить на
   веб-странице. Это делается с помощью метода addAttribute;
 - ModelMap: это расширение Map (со всеми характерными для интерфейса Map особенностями), которое используется для
   передачи атрибутов в представления. Он предоставляет более удобные методы для хранения атрибутов модели и обычно
   используется в контроллерах для добавления атрибутов в модель.
 - ModelAndView: это класс, который представляет собой контейнер для хранения как модели, так и необходимого
   представления. Это обертка вокруг модели данных и имени представления, что позволяет контроллеру в одном
   возвращаемом объекте указать и данные, и представление, которое должно быть использовано для отображения этих
   данных.

<======================================================= Views ========================================================>

ViewResolver - это компонент, который используется со стандартным контроллером (@Controller, а не @RestController) и
отвечает за определение возвращаемого пользователю представления. То есть данный компонент сопоставит возвращаемое
из контроллера значение и заменит его конкретным представлением.

View: Представление отвечает за отображение данных, предоставленных моделью. В Spring можно использовать различные
технологии для создания представлений, такие как JSP, Thymeleaf, FreeMarker и другие. Для RESTful веб-сервисов,
представлениями могут служить JSON или XML, которые отправляются в ответ на запросы клиента.

<================================= Порядок создания/выполнения основных компонентов ===================================>

1.  Servlet Container: Сначала запускается контейнер сервлетов (например, Tomcat, Jetty, или Undertow). Контейнер
    отвечает за управление жизненным циклом сервлетов, фильтров и слушателей (listeners), а также за обработку
    HTTP-запросов.
2.  ServletContextListener: Если в вашем приложении есть ServletContextListener, он инициализируется сразу после того,
    как Servlet Container готов к работе, но до создания каких-либо сервлетов или фильтров. ServletContextListener
    используется для выполнения кода на этапе инициализации и уничтожения контекста сервлета.
3.  ContextLoaderListener (Spring-specific): Этот слушатель инициализирует корневой веб-контекст Spring при старте
    приложения. Он загружает конфигурацию Spring и создает корневой ApplicationContext.
4.  ServletContext: После инициализации слушателей создается и настраивается ServletContext, который представляет
    собой контекст всего веб-приложения и доступен всем сервлетам и фильтрам.
5.  Filter: Фильтры инициализируются после ServletContext и до сервлетов. Они могут выполнять пред- и постобработку
    запросов перед тем, как они достигнут сервлетов или после того, как сервлеты их обработают.
6.  DispatcherServlet (Spring-specific): Этот сервлет является фронт-контроллером для Spring MVC и управляет потоком
    HTTP-запросов в приложении. Он инициализируется после фильтров и создает свой собственный WebApplicationContext,
    который является дочерним по отношению к корневому контексту, созданному ContextLoaderListener.
7.  HandlerMapping: После того как DispatcherServlet получает запрос, он использует HandlerMapping для определения,
    какой контроллер должен обработать запрос. HandlerMapping настраивается во время инициализации DispatcherServlet.
8.  Interceptors: Если в конфигурации указаны перехватчики (interceptors), они вызываются DispatcherServlet перед тем,
    как запрос будет передан контроллеру. Они могут использоваться для выполнения действий до и после обработки запроса
    контроллером.
9.  Controllers: Контроллеры обрабатывают входящие запросы и возвращают модель и имя представления, которые должны
    быть использованы для генерации ответа.
10. ViewResolver: После того как контроллер обработал запрос и вернул имя представления, ViewResolver используется
    DispatcherServlet для определения, какое представление должно быть использовано для рендеринга ответа.
11. View: Наконец, выбранное представление отвечает за рендеринг ответа, который будет отправлен обратно клиенту.
