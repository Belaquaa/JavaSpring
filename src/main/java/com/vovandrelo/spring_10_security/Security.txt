<============================================ Базовые понятия безопасности ============================================>

Идентификация — это процесс определения личности пользователя, например, по имени или его адресу электронной почты.

Аутентификация — это сам процесс проверки подлинности пользователя, чтобы убедиться, что он является тем, за кого себя
выдает. Для аутентификации пользователи могут вводить логин и пароль, биометрические данные или другие методы
идентификации.

Авторизация — это процесс проверки прав доступа пользователя к определенным ресурсам или функциям. Он проводится после
успешной аутентификации. В результате авторизации пользователь может получить доступ к определенным файлам, программам
и т. д.

Таким образом, идентификация — это определение личности пользователя, аутентификация — проверка подлинности
пользователя, а авторизация — определение его прав доступа к какому-то ресурсу.

<=================================================== Spring-Security ==================================================>

Spring Security — часть Spring фреймворка, которая предназначена для обеспечения безопасности в приложениях. Она
предоставляет широкий спектр функциональности для аутентификации, авторизации, защиты от атак, таких как CSRF, и
многое другое.

Все механизмы защиты в Spring Security реализованы с помощью последовательности фильтров. Конкретная последовательность
для того или иного запроса определяется классом FilterChainProxy. Когда запрос поступает в приложение, FilterChainProxy
определяет, какая из настроенных цепочек фильтров должна быть применена на основе URL запроса. Затем он делегирует
обработку запроса соответствующей цепочке фильтров. Каждый фильтр в цепочке может выполнять различные задачи, связанные
с безопасностью, такие как аутентификация, авторизация, проверка CSRF-токенов, управление сессиями и т.д.

<======================================= Настройка и подключение Spring-Security ======================================>

Подключение SpringSecurity происходит путём добавления аннотации @EnableWebSecurity к конфигурационному классу, внутри
которого происходит детальная настройка SpringSecurity.

<========================================= Основные компоненты Spring-Security ========================================>

SecurityContextHolder — это класс, который предоставляет доступ к текущему SecurityContext. Он использует ThreadLocal
для хранения данных безопасности, что означает, что состояние безопасности сохраняется в рамках одного потока и не
разделяется между разными потоками. Это позволяет сохранять информацию о безопасности для каждого индивидуального
запроса в многопоточных приложениях, таких как веб-приложения.

SecurityContext — это интерфейс, который хранит детали безопасности о текущем контексте выполнения. В частности, он
содержит Authentication объект, который представляет основную информацию о текущем пользователе.

Authentication — это интерфейс, который представляет информацию об аутентифицированном (или пытающемуся пройти
аутентификацию) пользователе, а именно:
 - principal:   Информация о пользователе, обычно содержит UserDetails;
 - credentials: Часто используется пароль. Во многих случаях он удаляется после аутентификации пользователя, чтобы
                гарантировать, что он не будет разглашен.
 - authorities: Экземпляры GrantedAuthority, которые представляют собой разрешения высокого уровня (роли). Имена
                ролей в Spring-Security должны иметь формат ROLE_NAME (например, ROLE_ADMIN), именно в таком виде
                они будут располагаться в БД и использоваться в приложении. Но есть одно исключение - файл
                конфигурации, там роли указываются без префикса ROLE_.

Основные реализации Authentication:
 - Класс UsernamePasswordAuthenticationToken - используется для аутентификации с использованием логина и пароля;

В любой момент приложение может получить доступ к SecurityContextHolder для получения текущего SecurityContext и,
соответственно, к объекту Authentication, чтобы узнать информацию о текущем пользователе или проверить его права
доступа.

Интерфейс AuthenticationManager - предназначен для выполнения аутентификации, его единственный метод authenticate
принимает частично заполненный объект Authentication и пытается его аутентифицировать. В случае успеха возвращается
полностью заполненный объект Authentication. В случае, если аутентификацию выполнить не удалось, вызывается исключение.

Класс ProviderManager - это наиболее часто используемая реализация AuthenticationManager. Она координирует процесс
аутентификации, делегируя работу одному или нескольким AuthenticationProvider-ам. ProviderManager перебирает список
AuthenticationProvider-ов и пытается аутентифицировать с помощью каждого из них, пока один из них не вернет успешный
результат или все не закончатся.

Интерфейс AuthenticationProvider - на основании переданного Authentication определяет тип аутентификации (по логику и
паролю, токену, сертификату и т.п). В случае, если определённый тип аутентификации поддерживается, выполняет её.
Имеет 2 метода:
 - authenticate: основной метод, который содержит логику аутентификации.
 - supports: определяет, может ли данный AuthenticationProvider обработать конкретный тип аутентификации.
В качестве результата работы возвращает объект аутентификации, который представляет прошедшего аутентификацию
пользователя.

Класс DaoAuthenticationProvider - это наиболее часто используемая реализация AuthenticationProvider, которая загружает
данные пользователя из базы данных с помощью UserDetailsService и сравнивает предоставленные учетные данные с
информацией из базы данных.

Интерфейс UserDetailsService - предназначен для извлечения пользовательской информации из внутреннего источника
данных (в том числе из БД). Имеет единственный метод, который по переданному username-у возвращает экземпляр интерфейса
UserDetails.

Интерфейс UserDetails - содержит информацию о пользователе, такую как имя пользователя, пароль, роли и другие атрибуты,
необходимые для аутентификации и авторизации.

В реальных приложениях чаще всего создаются кастомные реализации UserDetailsService и UserDetails, которые
интегрируются с существующей системой управления пользователями, например, с использованием ORM-фреймворков
вроде Hibernate для работы с базой данных.

Интерфейс PasswordEncoder - используется для шифрования паролей перед их сохранением в базу данных, а также для
проверки введенных паролей при аутентификации пользователей.

Класс BCryptPasswordEncoder - это наиболее часто используемая реализация, которая использует алгоритм BCrypt для
шифрования паролей.

<===================================== Выполнение аутентификации в Spring-Security ====================================>

1. Пользователь отправляет учетные данные (например, имя пользователя и пароль) на сервер;
2. Учетные данные помещаются в Authentication объект, который создается с помощью UsernamePasswordAuthenticationToken;
3. Authentication передаётся в AuthenticationManager (в частности ProviderManager), после чего обработка делегируется
   одному или нескольким AuthenticationProvider.
4. AuthenticationProvider пытается аутентифицировать пользователя. Если используется DaoAuthenticationProvider, он
   обращается к UserDetailsService для получения UserDetails.
    - Если аутентификация успешна, AuthenticationProvider полностью заполняет объект Authentication и возвращает
      обратно в AuthenticationManager;
    - Если пользователь не существует или введённый пароль - некорректный, то выбрасывается исключение;
5. Authentication объект сохраняется в SecurityContext, который в свою очередь сохраняется в SecurityContextHolder.