<======================================================= IoC & DI =====================================================>

Инверсия контроля (IoC, Inversion of Control) — это принцип программирования, при котором контроль над выполнением
программы переходит от пользовательского кода к фреймворку или библиотеке. Это означает, что вместо того чтобы
самостоятельно создавать и управлять объектами и их зависимостями, разработчик делегирует эту ответственность
фреймворку.

Внедрение зависимостей (DI) — одна из возможных реализаций принципа IoC. DI позволяет объектам получать свои
зависимости через конструкторы, методы или поля. В полном соответствии с принципом единственной ответственности объект
отдаёт заботу о построении требуемых ему зависимостей внешнему, специально предназначенному для этого общему механизму.

Преимущества этой архитектуры:
 - Отделение выполнения задачи от ее реализации;
 - Легкое переключение между различными реализациями;
 - Большая модульность программы;
 - Более легкое тестирование программы путем изоляции компонента или проверки его зависимостей и обеспечения
   взаимодействия компонентов через контракты.

<==================================================== Контейнер IoC ===================================================>

Контейнер IoC: Основной компонент фреймворка, который берет на себя ответственность за создание, связывание и
управлением жизненным циклом различных объектов (бинов).

Контейнер получает инструкции о том, какие объекты создавать, настраивать и собирать, через метаданные конфигурации,
которые представлены в виде XML, Java-аннотаций или Java-кода.

Spring предоставляет два основных типа IoC контейнеров:
 - BeanFactory: Это простой контейнер, который поддерживает DI и ленивую инициализацию бинов. Он подходит для
   легковесных приложений, где требуется минимальная функциональность.
 - ApplicationContext: Это более продвинутый контейнер, который расширяет BeanFactory и предоставляет дополнительные
   возможности, такие как поддержка интернационализации, публикация событий, AOP и многое другое. Это наиболее часто
   используемый контейнер в приложениях Spring.

Основные отличия BeanFactory и ApplicationContext:
 - ApplicationContext загружает все bean-ы при запуске, а BeanFactory - по требованию;
 - ApplicationContext поддерживает практически все типы scope для бинов, а BeanFactory только два - Singleton и
   Prototype;
 - ApplicationContext поддерживает автоматическую регистрацию BeanPostProcessor и BeanFactoryPostProcessor;
 - BeanFactory не поддерживает внедрения зависимостей на основе аннотаций;
 - BeanFactory не поддерживает AOP, а следовательно, нельзя использовать декларативный подход в работе с транзакциями;

Наиболее часто используемые реализации ApplicationContext включают:
 - ClassPathXmlApplicationContext: Для регистрации классов использует XML-конфигурацию из classpath;
 - FileSystemXmlApplicationContext: Для регистрации классов использует XML-конфигурацию из файловой системы;
 - AnnotationConfigApplicationContext: Для регистрации классов использует Code-конфигурацию и компоненты с аннотациями
   @Component, @Service, @Repository, @Controller и т.д.
 - WebApplicationContext: Специализированный вариант ApplicationContext, используемый для веб-приложений.

<======================================================== Bean ========================================================>

Bean - это обычный объект, который полностью управляется контейнером Spring IoC (Inversion of Control), он может быть
создан как с помощью Spring-конфигурации, так и с помощью аннотаций.
